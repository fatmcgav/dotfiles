# core {{{
[core]
	editor = code --wait
	filemode = false
	excludesfile = /Users/gavinwilliams/.gitignore_global

#}}}
# user {{{
[includeIf "gitdir:~/Personal/"]
  path = ~/.gitconfig-personal

[includeIf "gitdir:~/Work/"]
  path = ~/.gitconfig-work

#}}}
# color {{{
[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# }}}
# push/pull/diff/options {{{
[pull]
  default = current
	rebase = true
[diff]
  memonicprefix = true
	ignoreSubmodules = dirty
[branch]
  autosetuprebase = always
[apply]
  whitespace = nowarn

#}}}
# difftools {{{
#[difftool "sourcetree"]
#	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
#	path = 
#[mergetool "sourcetree"]
#	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
#	trustExitCode = true

# }}}
# alias {{{
[alias]
    work = config user.email gavin.williams@depop.com
    st = status -s

    root = rev-parse --show-toplevel

    cl = clone

    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    ft = fetch
    filelog = log -u
    fl = log -u
    pl = pull
    po = push origin

    ai = add --interactive

    co = checkout
    br = branch 
    #"!git branch -ra | grep -v done"
    bra = branch -ra
    #list commands
    le = log --oneline --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    #list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached
    #list modified files in last commit
    dl = "!git ll -1"
    #diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"

    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    #add github remote
    ra = "!f() { git remote add $1 https://github.com/$2.git; }; f"

    # Git-flow aliases
    fi = "!git flow init -fd"
    fs = "!git flow feature start $1"
    ff = "!git flow feature finish $1"
    fp = "!git flow feature publish $1"
    fo = "!git flow feature checkout $1"

    # Git worktree aliases
    wta = "!git worktree add $1"
    wtl = worktree list
    wtr = "!git worktree remove $1"

    # Prune gone branches
    prune-branches = "!git remote prune origin && git branch -vv | grep ': gone]' | awk '{$1 == \"+\" ? branch = $2 : branch = $1; print branch}' | xargs -r git branch -D"

    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Get upstream name
    upstream-name = !git remote | egrep -o '(upstream|origin)' | tail -1
    # Get HEAD branch
    head-branch = !git remote show $(git upstream-name) | awk '/HEAD branch/ {print $NF}'
    # Pull changes from origin, upstream and then merge master
    pu = !"git fetch origin -v; git fetch upstream -v; git merge $(git upstream-name)/$(git head-branch); git push"

    # Sync upstream
    sync = !git fetch --prune upstream && git rebase -p --autostash $1
# }}}

[rerere]
	enabled = true
[rebase]
	autosquash = true
[push]
	default = simple
[gpg]
	program = gpg
[url "git@github.com:"]
	insteadOf = https://github.com/
[remote "origin"]
	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
